{
  "_args": [
    [
      {
        "raw": "lowdb@^0.10.2",
        "scope": null,
        "escapedName": "lowdb",
        "name": "lowdb",
        "rawSpec": "^0.10.2",
        "spec": ">=0.10.2 <0.11.0",
        "type": "range"
      },
      "C:\\Users\\Yanakieva\\Desktop\\Git\\JavaScript-Applications\\Workshops\\Workshops-2017\\LiveDemo_20-April-2017_Fortune_Cookies"
    ]
  ],
  "_from": "lowdb@>=0.10.2 <0.11.0",
  "_id": "lowdb@0.10.3",
  "_inCache": true,
  "_location": "/lowdb",
  "_nodeVersion": "5.1.0",
  "_npmUser": {
    "name": "typicode",
    "email": "typicode@gmail.com"
  },
  "_npmVersion": "3.3.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "lowdb@^0.10.2",
    "scope": null,
    "escapedName": "lowdb",
    "name": "lowdb",
    "rawSpec": "^0.10.2",
    "spec": ">=0.10.2 <0.11.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/lowdb/-/lowdb-0.10.3.tgz",
  "_shasum": "a025412f48bb0aa4918b5396d7f0285b99154c9c",
  "_shrinkwrap": null,
  "_spec": "lowdb@^0.10.2",
  "_where": "C:\\Users\\Yanakieva\\Desktop\\Git\\JavaScript-Applications\\Workshops\\Workshops-2017\\LiveDemo_20-April-2017_Fortune_Cookies",
  "author": {
    "name": "Typicode",
    "email": "typicode@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/typicode/lowdb/issues"
  },
  "dependencies": {
    "graceful-fs": "^3.0.8",
    "json-parse-helpfulerror": "^1.0.3",
    "lodash": "^3.1.0",
    "q": "^1.4.1",
    "steno": "^0.4.1"
  },
  "description": "Flat JSON file database",
  "devDependencies": {
    "husky": "^0.9.0",
    "mocha": "^2.2.5",
    "rimraf": "^2.2.8",
    "sinon": "^1.12.2",
    "standard": "^4.0.1",
    "underscore-db": "^0.9.0"
  },
  "directories": {},
  "dist": {
    "shasum": "a025412f48bb0aa4918b5396d7f0285b99154c9c",
    "tarball": "https://registry.npmjs.org/lowdb/-/lowdb-0.10.3.tgz"
  },
  "gitHead": "c3e7131d18f5e75c1a393527588daf97e039cc61",
  "homepage": "https://github.com/typicode/lowdb",
  "keywords": [
    "flat",
    "file",
    "local",
    "database",
    "JSON",
    "lo-dash",
    "lodash",
    "underscore",
    "underscore-db",
    "embed",
    "embeddable"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "typicode",
      "email": "typicode@gmail.com"
    }
  ],
  "name": "lowdb",
  "optionalDependencies": {},
  "readme": "# lowdb [![NPM version](https://badge.fury.io/js/lowdb.svg)](http://badge.fury.io/js/lowdb) [![Build Status](https://travis-ci.org/typicode/lowdb.svg?branch=master)](https://travis-ci.org/typicode/lowdb)\n\n> Need a quick way to get a local database?\n\n## Example\n\n```javascript\nvar low = require('lowdb')\nvar db = low('db.json')\n\ndb('posts').push({ title: 'lowdb is awesome'})\n```\n\nDatabase is __automatically__ saved to `db.json`\n\n```javascript\n{\n  \"posts\": [\n    { \"title\": \"lowdb is awesome\" }\n  ]\n}\n```\n\nYou can query and manipulate it using __any__ [lodash](https://lodash.com/docs) __method__\n\n```javascript\ndb('posts').find({ title: 'lowdb is awesome' })\n```\n\n## Install\n\n```bash\nnpm install lowdb --save\n```\n\n## Features\n\n* Small\n* Serverless\n* lodash rich API\n* In-memory or disk-based\n* __Hackable__ (mixins, id, encryption, ...)\n\nIt's also __very easy to learn and use__ since it has __only 8 methods and properties__.\n\n_lowdb powers [json-server](https://github.com/typicode/json-server) package, [jsonplaceholder](http://jsonplaceholder.typicode.com/) website and [other projects](https://www.npmjs.com/browse/depended/lowdb)._\n\n## API\n\n__low([filename, options])__\n\nCreates a disk-based or in-memory database instance. If a filename is provided, it loads or creates it.\n\n```javascript\nvar db = low()          // in-memory\nvar db = low('db.json') // disk-based\n```\n\nWhen a filename is provided you can set options.\n\n```javascript\nvar db = low('db.json', {\n  autosave: true, // automatically save database on change (default: true)\n  async: true     // asynchronous write (default: true)\n  promise: false  // .save() and .value() return a promise (default: false)\n})\n```\n\n__low.stringify(obj)__ and __low.parse(str)__\n\nOverwrite these methods to customize JSON stringifying and parsing.\n\n__db.___\n\nDatabase lodash instance. Use it for example to add your own utility functions or third-party libraries.\n\n```javascript\ndb._.mixin({\n  second: function(array) {\n    return array[1]\n  }\n})\n\nvar song1 = db('songs').first()\nvar song2 = db('songs').second()\n```\n\n__db.object__\n\nUse whenever you want to access or modify the underlying database object.\n\n```javascript\nif (db.object.songs) console.log('songs array exists')\n```\n\n__db.save([filename])__\n\nSaves database to file.\n\n```javascript\nvar db = low('db.json')\ndb.save() // saves to db.json\ndb.save('copy.json')\n```\n\nNote: In case you directly modify the content of the database object, you'll need to manually call `save`\n\n```javascript\ndelete db.object.songs\ndb.save()\n```\n\n__db.saveSync([filename])__\n\nSynchronous version of `db.save()`\n\n## Guide\n\n### Operations\n\nWith LowDB you get access to the entire [lodash API](http://lodash.com/), so there's many ways to query and manipulate data. Here are a few examples to get you started.\n\nPlease note that data is returned by reference, this means that modifications to returned objects may change the database. To avoid such behaviour, you need to use `.cloneDeep()`.\n\nAlso, the execution of chained methods is lazy, that is, execution is deferred until `.value()` is called.\n\nSort the top five songs.\n\n```javascript\ndb('songs')\n  .chain()\n  .where({published: true})\n  .sortBy('views')\n  .take(5)\n  .value()\n```\n\nRetrieve song titles.\n\n```javascript\ndb('songs').pluck('title')\n```\n\nGet the number of songs.\n\n```javascript\ndb('songs').size()\n```\n\nMake a deep clone of songs.\n\n```javascript\ndb('songs').cloneDeep()\n```\n\nUpdate a song.\n\n```javascript\ndb('songs')\n  .chain()\n  .find({ title: 'low!' })\n  .assign({ title: 'hi!'})\n  .value()\n```\n\nRemove songs.\n\n```javascript\ndb('songs').remove({ title: 'low!' })\n```\n\n### Id support\n\nBeing able to retrieve data using an id can be quite useful, particularly in servers. To add id-based resources support to lowdb, you have 2 options.\n\n[underscore-db](https://github.com/typicode/underscore-db) provides a set of helpers for creating and manipulating id-based resources.\n\n```javascript\nvar db = low('db.json')\n\ndb._.mixin(require('underscore-db'))\n\nvar songId = db('songs').insert({ title: 'low!' }).id\nvar song   = db('songs').getById(songId)\n```\n\n[uuid](https://github.com/broofa/node-uuid) returns a unique id.\n\n```javascript\nvar uuid = require('uuid')\n\nvar songId = db('songs').push({ id: uuid(), title: 'low!' }).id\nvar song   = db('songs').find({ id: songId })\n```\n\n### Encryption support\n\nIn some cases, you may want to make it harder to read database content. By overwriting, `low.stringify` and `low.parse`, you can add custom encryption.\n\n```javascript\nvar crypto = require('crypto')\n\nvar cipher = crypto.createCipher('aes256', secretKey)\nvar decipher = crypto.createDecipher('aes256', secretKey)\n\nlow.stringify = function(obj) {\n  var str = JSON.stringify(obj)\n  return cipher.update(str, 'utf8', 'hex') + cipher.final('hex')\n}\n\nlow.parse = function(encrypted) {\n  var str = decipher.update(encrypted, 'hex', 'utf8') + decipher.final('utf8')\n  return JSON.parse(str)\n}\n```\n\n## Changelog\n\nSee details changes for each version in the [release notes](https://github.com/typicode/lowdb/releases).\n\n## Limits\n\nlowdb is a convenient method for storing data without setting up a database server. It's fast enough and safe to be used as an embedded database.\n\nHowever, if you need high performance and scalability more than simplicity, you should stick to databases like MongoDB.\n\n## License\n\nMIT - [Typicode](https://github.com/typicode)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/typicode/lowdb.git"
  },
  "scripts": {
    "precommit": "npm test",
    "test": "standard && mocha"
  },
  "version": "0.10.3"
}
