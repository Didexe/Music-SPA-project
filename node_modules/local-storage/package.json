{
  "_args": [
    [
      {
        "raw": "local-storage@^1.4.2",
        "scope": null,
        "escapedName": "local-storage",
        "name": "local-storage",
        "rawSpec": "^1.4.2",
        "spec": ">=1.4.2 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\Yanakieva\\Desktop\\SPA_MUSIC_FINAL\\Music-SPA-project"
    ]
  ],
  "_from": "local-storage@>=1.4.2 <2.0.0",
  "_id": "local-storage@1.4.2",
  "_inCache": true,
  "_location": "/local-storage",
  "_nodeVersion": "0.10.26",
  "_npmUser": {
    "name": "bevacqua",
    "email": "nicolasbevacqua@gmail.com"
  },
  "_npmVersion": "2.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "local-storage@^1.4.2",
    "scope": null,
    "escapedName": "local-storage",
    "name": "local-storage",
    "rawSpec": "^1.4.2",
    "spec": ">=1.4.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/local-storage/-/local-storage-1.4.2.tgz",
  "_shasum": "7ec2d3fb7f1ea91a85b160d3a785058f87bfbfa5",
  "_shrinkwrap": null,
  "_spec": "local-storage@^1.4.2",
  "_where": "C:\\Users\\Yanakieva\\Desktop\\SPA_MUSIC_FINAL\\Music-SPA-project",
  "author": {
    "name": "Nicolas Bevacqua",
    "email": "nicolasbevacqua@gmail.com",
    "url": "http://bevacqua.io/"
  },
  "bugs": {
    "url": "https://github.com/bevacqua/local-storage/issues"
  },
  "dependencies": {},
  "description": "A simplified localStorage API that just works",
  "devDependencies": {
    "browserify": "^8.0.3"
  },
  "directories": {},
  "dist": {
    "shasum": "7ec2d3fb7f1ea91a85b160d3a785058f87bfbfa5",
    "tarball": "https://registry.npmjs.org/local-storage/-/local-storage-1.4.2.tgz"
  },
  "gitHead": "97d2475ffb863c0848fb56949c8ed031a61db477",
  "homepage": "https://github.com/bevacqua/local-storage",
  "keywords": [
    "localstorage",
    "local-storage",
    "persistance"
  ],
  "license": "MIT",
  "main": "local-storage.js",
  "maintainers": [
    {
      "name": "bevacqua",
      "email": "nicolasbevacqua@gmail.com"
    }
  ],
  "name": "local-storage",
  "optionalDependencies": {},
  "readme": "# local-storage\n\n> A simplified `localStorage` API that just works\n\n# Install\n\nUsing `npm`\n\n```shell\nnpm install local-storage --save\n```\n\nUsing `bower`\n\n```shell\nbower install localstorage --save\n```\n\n# API\n\nThe API is a simplified way to interact with all things `localStorage`. Note that when `localStorage` is unsupported in the current browser, a fallback to an in-memory store is used transparently.\n\nFor that reason, consider that `local-storage` values _might evaporate_ across page views.\n\n## `ls(key, value?)`\n\nIf a `value` argument is provided, acts as `ls.set`. When `value` isn't provided, acts as `ls.get`.\n\n##### Example\n\n```js\nvar ls = require('local-storage');\n\nls('foo');\n// <- null\n\nls('foo', 'bar');\n// <- true\n\nls('foo');\n// <- 'bar'\n```\n\n## `ls.get(key)`\n\nReturns value under `key` in local storage. Equivalent to `ls(key)`. Internally parses the value from JSON before returning it.\n\n##### Example\n\n```js\nvar ls = require('local-storage');\n\nls('foo', 'bar');\n// <- true\n\nls.get('foo');\n// <- 'bar'\n```\n\n## `ls.set(key, value)`\n\nPersists `value` under `key` in local storage. Equivalent to `ls(key, value)`. Internally converts the `value` to JSON.\n\nReturns whether an error was thrown by the browser when trying to persist the value. Failure typically means a `QuotaExceededError` was thrown.\n\n##### Example\n\n```js\nvar ls = require('local-storage');\n\nls.set('foo', 'bar');\n// <- true\n\nls.get('foo');\n// <- 'bar'\n```\n\n## `ls.remove(key)`\n\nRemoves `key` from local storage. Returns `true` if the property was successfully deleted, and `false` otherwise.\n\n##### Example\n\n```js\nvar ls = require('local-storage');\n\nls.set('foo', 'bar');\n// <- true\n\nls.remove('foo');\n// <- true\n```\n\n## `ls.clear()`\n\nClears local storage.\n\n##### Example\n\n```js\nvar ls = require('local-storage');\n\nls.set('foo', 'bar');\nls.set('baz', 'tar');\nls.clear();\n```\n\n## `ls.on(key, fn)`\n\nListen for changes persisted against `key` on other tabs. Triggers `fn` when a change occurs, passing the following arguments.\n\n- `value`: the current value for `key` in local storage, parsed from the persisted JSON\n- `old`: the old value for `key` in local storage, parsed from the persisted JSON\n- `url`: the url for the tab where the modification came from\n\n##### Example\n\nOpen a page with the following snippet in multiple tabs. The `storage` event will trigger on all tabs except for the one that persisted the change.\n\n```js\nvar ls = require('local-storage');\n\nls.on('foo', storage);\nls.set('foo', 'bar');\n\nfunction storage (value) {\n  console.log('some other tab changed \"foo\" to ' + value);\n}\n```\n\n## `ls.off(key, fn)`\n\nRemoves a listener previously attached with `ls.on(key, fn)`.\n\n##### Example\n\n```js\nvar ls = require('local-storage');\n\nls.on('foo', storage);\nls.off('foo', storage);\n\nfunction storage (value) {\n  console.log('some other tab changed \"foo\" to ' + value);\n}\n```\n\n# License\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bevacqua/local-storage.git"
  },
  "scripts": {
    "deploy": "browserify local-storage.js -o dist/local-storage.js && git add . && git commit -am \"Autogenerated pre-deployment commit\" ; npm version ${BUMP:-\"patch\"} --no-git-tag-version && git add package.json && git commit -m \"Autogenerated pre-deployment commit\" && bower version ${BUMP:-\"patch\"} && git push --tags && npm publish"
  },
  "version": "1.4.2"
}
